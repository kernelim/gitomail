{
    "docs": [
        {
            "location": "/", 
            "text": "Gitomail\n\n\nGitomail is a tool for generating pretty inline-HTML emails for \nGit\n commits, with a sending capability to proper recipients.\n\n\nThis page provides a short introduction to Gitomail's main features.\n\n\nFirst, some history\n\n\nMany years before \nGit\n became popular or existed, people were using mailing lists in order to collaborate on code changes. The unified diff format, now popularized, as used as a diff format in the Plain Text-formatted emails. A text-based console email program such as \nmutt\n presented the user a convinent way to handle these diffs and import them into their source trees.\n\n\nBelow is a fake example of such an email, based on a commit in the PostgreSQL project:\n\n\n\n\n(shown here above, a screenshot from an old email reader)\n\n\nWith the advant of sites like \nGithub\n, email became under-used for reviewing changes, and in the Webmail era, emails containing diffs may appear somewhat arcane to developers of today.\n\n\nDiffs in the age of Webmail\n\n\nNowadays, the Plain Text version of the email message seems outdated. This is where Gitomail comes into the picture.\n\n\nFor example, the email from above, when sent by Gitomail, can appear like the following:\n\n\n\n\nCombined with full syntax highlighting, the HTML part of the email makes this appearance possible.\n\n\nInline reply friendliness\n\n\nSimilarly to Plain Text emails, it's possible to reply to changes inline:\n\n\n\n\nBranch change summaries\n\n\nGitomail tracks changes to branches, and can describe what changed, dealing properly with fast-forward and rebases. It's possible to specify how branches relate to each so that summaries make sense.\n\n\nFast forward example\n\n\n\n\nRebase example\n\n\n\n\nAutomatic recipients and code maintainership\n\n\nOf course, it is not enough to formatt the emails. We would also like to designate their recipients, preferrably in an automated way.\n\n\nInspired by a very wonderful script in the Linux kernel source tree named \nget_maintainers.pl\n, Gitomail supports its own \nMaintainers\n file format, which can specify rules to match people to certain files or directories.\n\n\nmaintainer dan file.*\nmaintainer jack Makefile\nreviewer mailinglist\n\n\n\n\nUsing a very minimal specification language, and formatted similarly to \n.gitignore\n, these \nMaintainers\n files can optionally spread across the source tree, assigning code to maintainers. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the code changed in the commit, effectively working very similar to \nget_maintainers.pl\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#gitomail", 
            "text": "Gitomail is a tool for generating pretty inline-HTML emails for  Git  commits, with a sending capability to proper recipients.  This page provides a short introduction to Gitomail's main features.", 
            "title": "Gitomail"
        }, 
        {
            "location": "/#first-some-history", 
            "text": "Many years before  Git  became popular or existed, people were using mailing lists in order to collaborate on code changes. The unified diff format, now popularized, as used as a diff format in the Plain Text-formatted emails. A text-based console email program such as  mutt  presented the user a convinent way to handle these diffs and import them into their source trees.  Below is a fake example of such an email, based on a commit in the PostgreSQL project:   (shown here above, a screenshot from an old email reader)  With the advant of sites like  Github , email became under-used for reviewing changes, and in the Webmail era, emails containing diffs may appear somewhat arcane to developers of today.", 
            "title": "First, some history"
        }, 
        {
            "location": "/#diffs-in-the-age-of-webmail", 
            "text": "Nowadays, the Plain Text version of the email message seems outdated. This is where Gitomail comes into the picture.  For example, the email from above, when sent by Gitomail, can appear like the following:   Combined with full syntax highlighting, the HTML part of the email makes this appearance possible.", 
            "title": "Diffs in the age of Webmail"
        }, 
        {
            "location": "/#inline-reply-friendliness", 
            "text": "Similarly to Plain Text emails, it's possible to reply to changes inline:", 
            "title": "Inline reply friendliness"
        }, 
        {
            "location": "/#branch-change-summaries", 
            "text": "Gitomail tracks changes to branches, and can describe what changed, dealing properly with fast-forward and rebases. It's possible to specify how branches relate to each so that summaries make sense.", 
            "title": "Branch change summaries"
        }, 
        {
            "location": "/#fast-forward-example", 
            "text": "", 
            "title": "Fast forward example"
        }, 
        {
            "location": "/#rebase-example", 
            "text": "", 
            "title": "Rebase example"
        }, 
        {
            "location": "/#automatic-recipients-and-code-maintainership", 
            "text": "Of course, it is not enough to formatt the emails. We would also like to designate their recipients, preferrably in an automated way.  Inspired by a very wonderful script in the Linux kernel source tree named  get_maintainers.pl , Gitomail supports its own  Maintainers  file format, which can specify rules to match people to certain files or directories.  maintainer dan file.*\nmaintainer jack Makefile\nreviewer mailinglist  Using a very minimal specification language, and formatted similarly to  .gitignore , these  Maintainers  files can optionally spread across the source tree, assigning code to maintainers. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the code changed in the commit, effectively working very similar to  get_maintainers.pl .", 
            "title": "Automatic recipients and code maintainership"
        }, 
        {
            "location": "/ChangeLog/", 
            "text": "TBD", 
            "title": "Changelog"
        }, 
        {
            "location": "/install/", 
            "text": "Install from precompiled binaries\n\n\nBinary RPMs for some Linux environments are provided:\n\n\n\n\nFedora\n : Available at \nCopr\n\n\nCentOS\n : Available at \nCopr\n\n\n\n\nOr, build and install from source\n\n\nAlternatively, it's possible to build Gitomail from source.\n\n\n\n\ninstall the \nStack tool\n.\n\n\nUsing \nstack\n, perform build and install:\n\n\n\n\ngit clone \nhttps://github.com/kernelim/gitomail\n\ncd gitomail\nstack install\n\n\n\n\nThe binary should be available as \n~/.local/bin/gitomail\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#install-from-precompiled-binaries", 
            "text": "Binary RPMs for some Linux environments are provided:   Fedora  : Available at  Copr  CentOS  : Available at  Copr", 
            "title": "Install from precompiled binaries"
        }, 
        {
            "location": "/install/#or-build-and-install-from-source", 
            "text": "Alternatively, it's possible to build Gitomail from source.   install the  Stack tool .  Using  stack , perform build and install:   git clone  https://github.com/kernelim/gitomail \ncd gitomail\nstack install  The binary should be available as  ~/.local/bin/gitomail .", 
            "title": "Or, build and install from source"
        }, 
        {
            "location": "/config/", 
            "text": "Configuration\n\n\nGitomail receives configuration via one or more YAML formatted files, using a scheme described here.\n\n\nFile lookup\n\n\nConfiguration files are loaded in this order:\n\n\n\n\nIf exists - \n~/.gitomailconf.yaml\n\n\nIf exists - \n$GIT_DIR/gitomailconf.yaml\n (where \nGIT_DIR\n is the current Git's repo meta directory)\n\n\nConfiguration files passed via the command line option \n-c\n.\n\n\n\n\nLater files override values that were set by former files.\n\n\nValues (general)\n\n\nrepo_name\n\n\nIf not guessed from working directory or passed from command line, this setting\ncan provide the repository name to be used when sending emails and formatting links.\n\n\nFor example:\n\n\nrepo_name: someproject\n\n\n\n\nexclude_refs\n\n\nList of regular expressions that match refs to exclude from monitoring.\n\n\nFor example:\n\n\nexclude_refs:\n- .*/_.*\n\n\n\n\nThis would exclude all refs that include the \n_/\n substring.\n\n\ninclude_refs\n\n\nIf provided, will only monitor refs that matches at least one of the references\nprovided, and as long as they do match any of the regexes in \nexclude_refs\n.\n\n\nFor example:\n\n\ninclude_refs:\n- heads/review/.*\nexclude_refs:\n- .*/_.*\n\n\n\n\nThis would include only refs that start with \nreview/\n and among them\nexclude all refs that include the \n_/\n substring.\n\n\nroot_refs\n\n\nThis setting is a list of regexes that determine the relationship between refs.\nEarlier ones will be traversed before later ones. It defaults to the following setting:\n\n\nroot_refs:\n- tags/.*\n- heads/master\n\n\n\n\nThis is needed because Gitomail cannot guess which branch diverged from which branch,\nand while it's only a convention that branches diverge from \nmaster\n, there could be\nother branches such as \nrelease-x.y.z\n from which people diverge (in that case, it\nwould be fitting to put \nheads/release-.*\n after \nheads/master\n.\n\n\nValues (Email generation)\n\n\ncommit_url\n\n\nPer commit sent or mentioned, Gitomail can create hyperlinks to a Web-based repository\nbrowser in the email, and this setting is the formating string for such links, where:\n\n\n\n\n%r\n - name of the repository\n\n\n%H\n - full commit hash\n\n\n\n\nFor example:\n\n\ncommit_url: https://github.com/kernelim/%r/commit/%H\n\n\n\n\nblob_in_commit_url\n\n\nIn diffs, this optional field can help to create hyperlinks from the filenames presented\nin the meta-data to their full version. This setting is the formating string for such links,\nwhere:\n\n\n\n\n%r\n - name of the repository\n\n\n%H\n - full commit hash\n\n\n%f\n - filename in tree\n\n\n\n\nFor example:\n\n\nblob_in_commit_url: https://github.com/kernelim/%r/blob/%H/%f\n\n\n\n\nfrom_email\n\n\nThe fully formed email address to put in the \nForm:\n email field.\n\n\nFor example:\n\n\nfrom_email: Gitomail \nosiris@aloni.org\n\n\n\n\n\nfiltered_email_destinations\n\n\nDefault: empty\n\n\nThese are a list of email addresses (e.g. \na@b.c\n) to which never to send emails, even\nif they appear as maintainers.\n\n\nsource_highlight\n\n\nDefault: True\n\n\nA boolean which specifies whether to preform syntax highlighting.\n\n\ncommit_subject_line\n\n\nDefault (below):\n\n\ncommit_subject_line: [%r %b %h%n] %s\n\n\n\n\nFormat string for the per-commit subject line.\n\n\nsummary_subject_line\n\n\nDefault (below):\n\n\ndefault_subject_line: [%r] %s\n\n\n\n\nFormat string for the summary email subject line.\n\n\nValues (SMTP related)\n\n\nsmtp_hostname\n\n\nSMTP hostname for sending mails.\n\n\nsmtp_port\n\n\nSMTP port for sending mails, defaults to 587.\n\n\nsmtp_starttls\n\n\nWhether to enable TLS - defaults to True.\n\n\nsmtp_username\n\n\nsmtp_password\n\n\nValues (JIRA integration)\n\n\nThe following fields allow to optionally activate support for JIRA integration.\n\n\nissue_track_match\n\n\nThis field describes a regex that matches strings that link to issues. The inner\nmost parenthesis is the part of the match that will receive the hyperlink.\n\n\nFor example:\n\n\nissue_track_match: '[[]((PROJECT|OTHER|ISSUE)-[0-9]+)[]]'\n\n\n\n\nWith this matcher, \n[PROJECT-123]\n will match, and the substring \nPROJECT-123\n\nwill get hyperlinked. Plus, that substring is used for the \njira_cc\n field,\nand \nissue_track_url\n fields, later on.\n\n\nissue_track_url\n\n\nThis field describes the hyperlink to generate for each issue mention in the\ncommit message.\n\n\nFor example:\n\n\nissue_track_url: https://somefakeproject.com/browse/%s\n\n\n\n\njira_cc\n\n\nThis field can specify a JIRA server and authentication credentials, from which\nGitomail would automatically fetch data concerning issues mentioned in commits. The\nmeta-data used from these issues can specify additional people to address when\nautomatically sending the emails.\n\n\nFor example:\n\n\njira_cc:\n  url: https://somecompany.atlassian.net/rest/api/2/issue/%s\n  http_creds: 'username:password'\n  fields:\n  - customfield_10300", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/#configuration", 
            "text": "Gitomail receives configuration via one or more YAML formatted files, using a scheme described here.", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/#file-lookup", 
            "text": "Configuration files are loaded in this order:   If exists -  ~/.gitomailconf.yaml  If exists -  $GIT_DIR/gitomailconf.yaml  (where  GIT_DIR  is the current Git's repo meta directory)  Configuration files passed via the command line option  -c .   Later files override values that were set by former files.", 
            "title": "File lookup"
        }, 
        {
            "location": "/config/#values-general", 
            "text": "", 
            "title": "Values (general)"
        }, 
        {
            "location": "/config/#repo_name", 
            "text": "If not guessed from working directory or passed from command line, this setting\ncan provide the repository name to be used when sending emails and formatting links.  For example:  repo_name: someproject", 
            "title": "repo_name"
        }, 
        {
            "location": "/config/#exclude_refs", 
            "text": "List of regular expressions that match refs to exclude from monitoring.  For example:  exclude_refs:\n- .*/_.*  This would exclude all refs that include the  _/  substring.", 
            "title": "exclude_refs"
        }, 
        {
            "location": "/config/#include_refs", 
            "text": "If provided, will only monitor refs that matches at least one of the references\nprovided, and as long as they do match any of the regexes in  exclude_refs .  For example:  include_refs:\n- heads/review/.*\nexclude_refs:\n- .*/_.*  This would include only refs that start with  review/  and among them\nexclude all refs that include the  _/  substring.", 
            "title": "include_refs"
        }, 
        {
            "location": "/config/#root_refs", 
            "text": "This setting is a list of regexes that determine the relationship between refs.\nEarlier ones will be traversed before later ones. It defaults to the following setting:  root_refs:\n- tags/.*\n- heads/master  This is needed because Gitomail cannot guess which branch diverged from which branch,\nand while it's only a convention that branches diverge from  master , there could be\nother branches such as  release-x.y.z  from which people diverge (in that case, it\nwould be fitting to put  heads/release-.*  after  heads/master .", 
            "title": "root_refs"
        }, 
        {
            "location": "/config/#values-email-generation", 
            "text": "", 
            "title": "Values (Email generation)"
        }, 
        {
            "location": "/config/#commit_url", 
            "text": "Per commit sent or mentioned, Gitomail can create hyperlinks to a Web-based repository\nbrowser in the email, and this setting is the formating string for such links, where:   %r  - name of the repository  %H  - full commit hash   For example:  commit_url: https://github.com/kernelim/%r/commit/%H", 
            "title": "commit_url"
        }, 
        {
            "location": "/config/#blob_in_commit_url", 
            "text": "In diffs, this optional field can help to create hyperlinks from the filenames presented\nin the meta-data to their full version. This setting is the formating string for such links,\nwhere:   %r  - name of the repository  %H  - full commit hash  %f  - filename in tree   For example:  blob_in_commit_url: https://github.com/kernelim/%r/blob/%H/%f", 
            "title": "blob_in_commit_url"
        }, 
        {
            "location": "/config/#from_email", 
            "text": "The fully formed email address to put in the  Form:  email field.  For example:  from_email: Gitomail  osiris@aloni.org", 
            "title": "from_email"
        }, 
        {
            "location": "/config/#filtered_email_destinations", 
            "text": "Default: empty  These are a list of email addresses (e.g.  a@b.c ) to which never to send emails, even\nif they appear as maintainers.", 
            "title": "filtered_email_destinations"
        }, 
        {
            "location": "/config/#source_highlight", 
            "text": "Default: True  A boolean which specifies whether to preform syntax highlighting.", 
            "title": "source_highlight"
        }, 
        {
            "location": "/config/#commit_subject_line", 
            "text": "Default (below):  commit_subject_line: [%r %b %h%n] %s  Format string for the per-commit subject line.", 
            "title": "commit_subject_line"
        }, 
        {
            "location": "/config/#summary_subject_line", 
            "text": "Default (below):  default_subject_line: [%r] %s  Format string for the summary email subject line.", 
            "title": "summary_subject_line"
        }, 
        {
            "location": "/config/#values-smtp-related", 
            "text": "", 
            "title": "Values (SMTP related)"
        }, 
        {
            "location": "/config/#smtp_hostname", 
            "text": "SMTP hostname for sending mails.", 
            "title": "smtp_hostname"
        }, 
        {
            "location": "/config/#smtp_port", 
            "text": "SMTP port for sending mails, defaults to 587.", 
            "title": "smtp_port"
        }, 
        {
            "location": "/config/#smtp_starttls", 
            "text": "Whether to enable TLS - defaults to True.", 
            "title": "smtp_starttls"
        }, 
        {
            "location": "/config/#smtp_username", 
            "text": "", 
            "title": "smtp_username"
        }, 
        {
            "location": "/config/#smtp_password", 
            "text": "", 
            "title": "smtp_password"
        }, 
        {
            "location": "/config/#values-jira-integration", 
            "text": "The following fields allow to optionally activate support for JIRA integration.", 
            "title": "Values (JIRA integration)"
        }, 
        {
            "location": "/config/#issue_track_match", 
            "text": "This field describes a regex that matches strings that link to issues. The inner\nmost parenthesis is the part of the match that will receive the hyperlink.  For example:  issue_track_match: '[[]((PROJECT|OTHER|ISSUE)-[0-9]+)[]]'  With this matcher,  [PROJECT-123]  will match, and the substring  PROJECT-123 \nwill get hyperlinked. Plus, that substring is used for the  jira_cc  field,\nand  issue_track_url  fields, later on.", 
            "title": "issue_track_match"
        }, 
        {
            "location": "/config/#issue_track_url", 
            "text": "This field describes the hyperlink to generate for each issue mention in the\ncommit message.  For example:  issue_track_url: https://somefakeproject.com/browse/%s", 
            "title": "issue_track_url"
        }, 
        {
            "location": "/config/#jira_cc", 
            "text": "This field can specify a JIRA server and authentication credentials, from which\nGitomail would automatically fetch data concerning issues mentioned in commits. The\nmeta-data used from these issues can specify additional people to address when\nautomatically sending the emails.  For example:  jira_cc:\n  url: https://somecompany.atlassian.net/rest/api/2/issue/%s\n  http_creds: 'username:password'\n  fields:\n  - customfield_10300", 
            "title": "jira_cc"
        }, 
        {
            "location": "/execution/", 
            "text": "TBD", 
            "title": "Execution"
        }, 
        {
            "location": "/gmail/", 
            "text": "TBD", 
            "title": "Recommended GMail filters"
        }
    ]
}