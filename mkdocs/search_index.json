{
    "docs": [
        {
            "location": "/", 
            "text": "Gitomail\n\n\nGitomail is a tool for generating pretty inline-HTML emails for \nGit\n commits, with a sending capability to proper recipients.\n\n\nThis page provides a short introduction to Gitomail's main features.\n\n\nFirst, some history\n\n\nMany years before \nGit\n became popular or existed, people were using mailing lists in order to collaborate on code changes. The unified diff format, now popularized, as used as a diff format in the Plain Text-formatted emails. A text-based console email program such as \nmutt\n presented the user a convinent way to handle these diffs and import them into their source trees.\n\n\nBelow is a fake example of such an email, based on a commit in the PostgreSQL project:\n\n\n\n\n(shown here above, a screenshot from an old email reader)\n\n\nWith the advant of sites like \nGithub\n, email became under-used for reviewing changes, and in the Webmail era, emails containing diffs may appear somewhat arcane to developers of today.\n\n\nDiffs in the age of Webmail\n\n\nNowadays, the Plain Text version of the email message seems outdated. This is where Gitomail comes into the picture.\n\n\nFor example, the email from above, when sent by Gitomail, can appear like the following:\n\n\n\n\nCombined with full syntax highlighting, the HTML part of the email makes this appearance possible.\n\n\nInline reply friendliness\n\n\nSimilarly to Plain Text emails, it's possible to reply to changes inline:\n\n\n\n\nBranch change summaries\n\n\nGitomail tracks changes to branches, and can describe what changed, dealing properly with fast-forward and rebases. It's possible to specify how branches relate to each so that summaries make sense.\n\n\nFast forward example\n\n\n\n\nRebase example\n\n\n\n\nAutomatic recipients and code maintainership\n\n\nOf course, it is not enough to format the emails. We would also like to designate their recipients, preferrably in an automated way.\n\n\nInspired by a very wonderful script in the Linux kernel source tree named \nget_maintainers.pl\n, Gitomail supports its own \nMaintainers file format\n, which can specify rules to match people to certain files or directories.\n\n\nmaintainer dan file.*\nmaintainer jack Makefile\nreviewer mailinglist\n\n\n\n\nUsing a very minimal specification language, and formatted similarly to \n.gitignore\n, these \nMaintainers\n files can optionally spread across the source tree, assigning code to maintainers. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the code changed in the commit, effectively working very similarly to \nget_maintainers.pl\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#gitomail", 
            "text": "Gitomail is a tool for generating pretty inline-HTML emails for  Git  commits, with a sending capability to proper recipients.  This page provides a short introduction to Gitomail's main features.", 
            "title": "Gitomail"
        }, 
        {
            "location": "/#first-some-history", 
            "text": "Many years before  Git  became popular or existed, people were using mailing lists in order to collaborate on code changes. The unified diff format, now popularized, as used as a diff format in the Plain Text-formatted emails. A text-based console email program such as  mutt  presented the user a convinent way to handle these diffs and import them into their source trees.  Below is a fake example of such an email, based on a commit in the PostgreSQL project:   (shown here above, a screenshot from an old email reader)  With the advant of sites like  Github , email became under-used for reviewing changes, and in the Webmail era, emails containing diffs may appear somewhat arcane to developers of today.", 
            "title": "First, some history"
        }, 
        {
            "location": "/#diffs-in-the-age-of-webmail", 
            "text": "Nowadays, the Plain Text version of the email message seems outdated. This is where Gitomail comes into the picture.  For example, the email from above, when sent by Gitomail, can appear like the following:   Combined with full syntax highlighting, the HTML part of the email makes this appearance possible.", 
            "title": "Diffs in the age of Webmail"
        }, 
        {
            "location": "/#inline-reply-friendliness", 
            "text": "Similarly to Plain Text emails, it's possible to reply to changes inline:", 
            "title": "Inline reply friendliness"
        }, 
        {
            "location": "/#branch-change-summaries", 
            "text": "Gitomail tracks changes to branches, and can describe what changed, dealing properly with fast-forward and rebases. It's possible to specify how branches relate to each so that summaries make sense.", 
            "title": "Branch change summaries"
        }, 
        {
            "location": "/#fast-forward-example", 
            "text": "", 
            "title": "Fast forward example"
        }, 
        {
            "location": "/#rebase-example", 
            "text": "", 
            "title": "Rebase example"
        }, 
        {
            "location": "/#automatic-recipients-and-code-maintainership", 
            "text": "Of course, it is not enough to format the emails. We would also like to designate their recipients, preferrably in an automated way.  Inspired by a very wonderful script in the Linux kernel source tree named  get_maintainers.pl , Gitomail supports its own  Maintainers file format , which can specify rules to match people to certain files or directories.  maintainer dan file.*\nmaintainer jack Makefile\nreviewer mailinglist  Using a very minimal specification language, and formatted similarly to  .gitignore , these  Maintainers  files can optionally spread across the source tree, assigning code to maintainers. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the code changed in the commit, effectively working very similarly to  get_maintainers.pl .", 
            "title": "Automatic recipients and code maintainership"
        }, 
        {
            "location": "/ChangeLog/", 
            "text": "TBD", 
            "title": "Changelog"
        }, 
        {
            "location": "/install/", 
            "text": "Install from precompiled binaries\n\n\nBinary RPMs for some Linux environments are provided:\n\n\n\n\nFedora\n : Available at \nCopr\n\n\nCentOS\n : Available at \nCopr\n\n\n\n\nOr, build and install from source\n\n\nAlternatively, it's possible to build Gitomail from source.\n\n\n\n\ninstall the \nStack tool\n.\n\n\nUsing \nstack\n, perform build and install:\n\n\n\n\ngit clone https://github.com/kernelim/gitomail\ncd gitomail\nstack install\n\n\n\n\nThe binary should be available as \n~/.local/bin/gitomail\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#install-from-precompiled-binaries", 
            "text": "Binary RPMs for some Linux environments are provided:   Fedora  : Available at  Copr  CentOS  : Available at  Copr", 
            "title": "Install from precompiled binaries"
        }, 
        {
            "location": "/install/#or-build-and-install-from-source", 
            "text": "Alternatively, it's possible to build Gitomail from source.   install the  Stack tool .  Using  stack , perform build and install:   git clone https://github.com/kernelim/gitomail\ncd gitomail\nstack install  The binary should be available as  ~/.local/bin/gitomail .", 
            "title": "Or, build and install from source"
        }, 
        {
            "location": "/execution/", 
            "text": "Execution\n\n\nRunning \ngitomail\n, without arguments, shows the available command line options. This documentation here covers the highlights among the supported modes.\n\n\nThe auto-mailer command\n\n\nThe \nauto-mailer\n command responsible for sending emails, when Gitomail is installed in server settings.\n\n\nWhen running \ngitomail auto-mailer\n for the first time in a repository, Gitomail does nothing, and only saves a reference point for further executions.\n\n\n$ gitomail auto-mailer\nInitial save of ref map. Will start tracking refs from now (this may take awhile)\nRelating commits to refs\n\n\n\n\nLater, when executed periodically, the command tracks ref changes in the local repository. According to \nconfiguration\n, it will send emails when changes are detected.\n\n\n$ gitomail auto-mailer\nRelating commits to refs\nRef heads/master: creating summaries\nRef heads/master: creating emails\n  Formatting 35b713e88688e8bca6840bab2fa7597a59214458\n  Formatting 79fccc22f8594cf1bd21bd52202c0add45f30cc1\n  Formatting ee223f192987668121abf16a9cf1681ff47fdbfd\n  Formatting c8978f3073c62d3e5972deaac998a21def4d70ee\n  Formatting a81bf0acb4ec12178f3045ea8e73eb2f1b3174fd\n  Formatting 33ac8a455e29766fe1478e0057b85488fbc49e71\n  Formatting 0e8eb5974f47fbd72c637335d3991f454998e3dc\n  Formatting b0dca7df31e08f4dede0d0b6f13f2559d99b1e49\n  Formatting cef53ef7945dbdac38b4b65ce767b82e07917f94\n  Formatting f2245253fe77cff4f2898f46fafb135d36a47854\nSending emails!\n  Sending '[gitomail] master branch added 10 commits: d6cd759c8..f2245253f'\n  Sending '[gitomail master 35b713e88, #1] Documentation work'\n  Sending '[gitomail master 79fccc22f, #2] Documentation: Basic intro'\n  Sending '[gitomail master ee223f192, #3] doc: Plain Text E-Mails rather than ASCII'\n  Sending '[gitomail master c8978f307, #4] Documentation: install.md'\n  Sending '[gitomail master a81bf0acb, #5] Documentation fixes'\n  Sending '[gitomail master 33ac8a455, #6] 'Email' is the established shortname for 'Electronic Mail''\n  Sending '[gitomail master 0e8eb5974, #7] Email - capitalication only when needed'\n  Sending '[gitomail master b0dca7df3, #8] Spelling for Webmail'\n  Sending '[gitomail master cef53ef79, #9] Documentation: partially write config.md'\n  Sending '[gitomail master f2245253f, #10] Documention: config.md roundup'\n\n\n\n\nGitolite integration\n\n\nThe \nintegration\n folder, installed with Gitomail, or taken from its source tree, contains an example on how to run Gitomail on a \nGitolite\n server.", 
            "title": "Execution"
        }, 
        {
            "location": "/execution/#execution", 
            "text": "Running  gitomail , without arguments, shows the available command line options. This documentation here covers the highlights among the supported modes.", 
            "title": "Execution"
        }, 
        {
            "location": "/execution/#the-auto-mailer-command", 
            "text": "The  auto-mailer  command responsible for sending emails, when Gitomail is installed in server settings.  When running  gitomail auto-mailer  for the first time in a repository, Gitomail does nothing, and only saves a reference point for further executions.  $ gitomail auto-mailer\nInitial save of ref map. Will start tracking refs from now (this may take awhile)\nRelating commits to refs  Later, when executed periodically, the command tracks ref changes in the local repository. According to  configuration , it will send emails when changes are detected.  $ gitomail auto-mailer\nRelating commits to refs\nRef heads/master: creating summaries\nRef heads/master: creating emails\n  Formatting 35b713e88688e8bca6840bab2fa7597a59214458\n  Formatting 79fccc22f8594cf1bd21bd52202c0add45f30cc1\n  Formatting ee223f192987668121abf16a9cf1681ff47fdbfd\n  Formatting c8978f3073c62d3e5972deaac998a21def4d70ee\n  Formatting a81bf0acb4ec12178f3045ea8e73eb2f1b3174fd\n  Formatting 33ac8a455e29766fe1478e0057b85488fbc49e71\n  Formatting 0e8eb5974f47fbd72c637335d3991f454998e3dc\n  Formatting b0dca7df31e08f4dede0d0b6f13f2559d99b1e49\n  Formatting cef53ef7945dbdac38b4b65ce767b82e07917f94\n  Formatting f2245253fe77cff4f2898f46fafb135d36a47854\nSending emails!\n  Sending '[gitomail] master branch added 10 commits: d6cd759c8..f2245253f'\n  Sending '[gitomail master 35b713e88, #1] Documentation work'\n  Sending '[gitomail master 79fccc22f, #2] Documentation: Basic intro'\n  Sending '[gitomail master ee223f192, #3] doc: Plain Text E-Mails rather than ASCII'\n  Sending '[gitomail master c8978f307, #4] Documentation: install.md'\n  Sending '[gitomail master a81bf0acb, #5] Documentation fixes'\n  Sending '[gitomail master 33ac8a455, #6] 'Email' is the established shortname for 'Electronic Mail''\n  Sending '[gitomail master 0e8eb5974, #7] Email - capitalication only when needed'\n  Sending '[gitomail master b0dca7df3, #8] Spelling for Webmail'\n  Sending '[gitomail master cef53ef79, #9] Documentation: partially write config.md'\n  Sending '[gitomail master f2245253f, #10] Documention: config.md roundup'", 
            "title": "The auto-mailer command"
        }, 
        {
            "location": "/execution/#gitolite-integration", 
            "text": "The  integration  folder, installed with Gitomail, or taken from its source tree, contains an example on how to run Gitomail on a  Gitolite  server.", 
            "title": "Gitolite integration"
        }, 
        {
            "location": "/config/", 
            "text": "Configuration\n\n\nGitomail receives configuration via one or more YAML formatted files, using a scheme described here.\n\n\nFile lookup\n\n\nConfiguration files are loaded in this order:\n\n\n\n\nIf exists - \n~/.gitomailconf.yaml\n\n\nIf exists - \n$GIT_DIR/gitomailconf.yaml\n (where \nGIT_DIR\n is the current Git's repo meta directory)\n\n\nConfiguration files passed via the command line option \n-c\n.\n\n\n\n\nLater files override values that were set by former files.\n\n\nValues (general)\n\n\nrepo_name\n\n\nIf not guessed from working directory or passed from command line, this setting\ncan provide the repository name to be used when sending emails and formatting links.\n\n\nFor example:\n\n\nrepo_name: someproject\n\n\n\n\nexclude_refs\n\n\nList of regular expressions that match refs to exclude from monitoring.\n\n\nFor example:\n\n\nexclude_refs:\n- .*/_.*\n\n\n\n\nThis would exclude all refs that include the \n_/\n substring.\n\n\ninclude_refs\n\n\nIf provided, will only monitor refs that matches at least one of the references\nprovided, and as long as they do match any of the regexes in \nexclude_refs\n.\n\n\nFor example:\n\n\ninclude_refs:\n- heads/review/.*\nexclude_refs:\n- .*/_.*\n\n\n\n\nThis would include only refs that start with \nreview/\n and among them\nexclude all refs that include the \n_/\n substring.\n\n\nroot_refs\n\n\nThis setting is a list of regexes that determine the relationship between refs.\nEarlier ones will be traversed before later ones. It defaults to the following setting:\n\n\nroot_refs:\n- tags/.*\n- heads/master\n\n\n\n\nThis is needed because Gitomail cannot guess which branch diverged from which branch,\nand while it's only a convention that branches diverge from \nmaster\n, there could be\nother branches such as \nrelease-x.y.z\n from which people diverge (in that case, it\nwould be fitting to put \nheads/release-.*\n after \nheads/master\n.\n\n\nValues (Email generation)\n\n\ncommit_url\n\n\nPer commit sent or mentioned, Gitomail can create hyperlinks to a Web-based repository\nbrowser in the email, and this setting is the formating string for such links, where:\n\n\n\n\n%r\n - name of the repository\n\n\n%H\n - full commit hash\n\n\n\n\nFor example:\n\n\ncommit_url: https://github.com/kernelim/%r/commit/%H\n\n\n\n\nblob_in_commit_url\n\n\nIn diffs, this optional field can help to create hyperlinks from the filenames presented\nin the meta-data to their full version. This setting is the formating string for such links,\nwhere:\n\n\n\n\n%r\n - name of the repository\n\n\n%H\n - full commit hash\n\n\n%f\n - filename in tree\n\n\n\n\nFor example:\n\n\nblob_in_commit_url: https://github.com/kernelim/%r/blob/%H/%f\n\n\n\n\nfrom_email\n\n\nThe fully formed email address to put in the \nForm:\n email field.\n\n\nFor example:\n\n\nfrom_email: Gitomail \nosiris@aloni.org\n\n\n\n\n\nfiltered_email_destinations\n\n\nDefault: empty\n\n\nThese are a list of email addresses (e.g. \na@b.c\n) to which never to send emails, even\nif they appear as maintainers.\n\n\nsource_highlight\n\n\nDefault: True\n\n\nA boolean which specifies whether to preform syntax highlighting.\n\n\ncommit_subject_line\n\n\nDefault (below):\n\n\ncommit_subject_line: [%r %b %h%n] %s\n\n\n\n\nFormat string for the per-commit subject line.\n\n\nsummary_subject_line\n\n\nDefault (below):\n\n\ndefault_subject_line: [%r] %s\n\n\n\n\nFormat string for the summary email subject line.\n\n\nValues (SMTP related)\n\n\nsmtp_hostname\n\n\nSMTP hostname for sending mails.\n\n\nsmtp_port\n\n\nSMTP port for sending mails, defaults to 587.\n\n\nsmtp_starttls\n\n\nWhether to enable TLS - defaults to True.\n\n\nsmtp_username\n\n\nSMTP username for sending mails.\n\n\nsmtp_password\n\n\nSMTP password for sending mails.\n\n\nExample GMail configuration\n\n\nA configuration for GMail or 'Google for Domains' can be based on the following template:\n\n\nsmtp_hostname: smtp.gmail.com\nsmtp_starttls: true\nsmtp_username: example-user@gmail.com\nsmtp_password: example-password\nfrom_email: Example User \nexample-user@gmail.com\n\n\n\n\n\nValues (JIRA integration)\n\n\nThe following fields allow to optionally activate support for JIRA integration.\n\n\nissue_track_match\n\n\nThis field describes a regex that matches strings that link to issues. The inner\nmost parenthesis is the part of the match that will receive the hyperlink.\n\n\nFor example:\n\n\nissue_track_match: '[[]((PROJECT|OTHER|ISSUE)-[0-9]+)[]]'\n\n\n\n\nWith this matcher, \n[PROJECT-123]\n will match, and the substring \nPROJECT-123\n\nwill get hyperlinked. Plus, that substring is used for the \njira_cc\n field,\nand \nissue_track_url\n fields, later on.\n\n\nissue_track_url\n\n\nThis field describes the hyperlink to generate for each issue mention in the\ncommit message.\n\n\nFor example:\n\n\nissue_track_url: https://somefakeproject.com/browse/%s\n\n\n\n\njira_cc\n\n\nThis field can specify a JIRA server and authentication credentials, from which\nGitomail would automatically fetch data concerning issues mentioned in commits. The\nmeta-data used from these issues can specify additional people to address when\nautomatically sending the emails.\n\n\nFor example:\n\n\njira_cc:\n  url: https://somecompany.atlassian.net/rest/api/2/issue/%s\n  http_creds: 'username:password'\n  fields:\n  - customfield_10300", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/#configuration", 
            "text": "Gitomail receives configuration via one or more YAML formatted files, using a scheme described here.", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/#file-lookup", 
            "text": "Configuration files are loaded in this order:   If exists -  ~/.gitomailconf.yaml  If exists -  $GIT_DIR/gitomailconf.yaml  (where  GIT_DIR  is the current Git's repo meta directory)  Configuration files passed via the command line option  -c .   Later files override values that were set by former files.", 
            "title": "File lookup"
        }, 
        {
            "location": "/config/#values-general", 
            "text": "", 
            "title": "Values (general)"
        }, 
        {
            "location": "/config/#repo_name", 
            "text": "If not guessed from working directory or passed from command line, this setting\ncan provide the repository name to be used when sending emails and formatting links.  For example:  repo_name: someproject", 
            "title": "repo_name"
        }, 
        {
            "location": "/config/#exclude_refs", 
            "text": "List of regular expressions that match refs to exclude from monitoring.  For example:  exclude_refs:\n- .*/_.*  This would exclude all refs that include the  _/  substring.", 
            "title": "exclude_refs"
        }, 
        {
            "location": "/config/#include_refs", 
            "text": "If provided, will only monitor refs that matches at least one of the references\nprovided, and as long as they do match any of the regexes in  exclude_refs .  For example:  include_refs:\n- heads/review/.*\nexclude_refs:\n- .*/_.*  This would include only refs that start with  review/  and among them\nexclude all refs that include the  _/  substring.", 
            "title": "include_refs"
        }, 
        {
            "location": "/config/#root_refs", 
            "text": "This setting is a list of regexes that determine the relationship between refs.\nEarlier ones will be traversed before later ones. It defaults to the following setting:  root_refs:\n- tags/.*\n- heads/master  This is needed because Gitomail cannot guess which branch diverged from which branch,\nand while it's only a convention that branches diverge from  master , there could be\nother branches such as  release-x.y.z  from which people diverge (in that case, it\nwould be fitting to put  heads/release-.*  after  heads/master .", 
            "title": "root_refs"
        }, 
        {
            "location": "/config/#values-email-generation", 
            "text": "", 
            "title": "Values (Email generation)"
        }, 
        {
            "location": "/config/#commit_url", 
            "text": "Per commit sent or mentioned, Gitomail can create hyperlinks to a Web-based repository\nbrowser in the email, and this setting is the formating string for such links, where:   %r  - name of the repository  %H  - full commit hash   For example:  commit_url: https://github.com/kernelim/%r/commit/%H", 
            "title": "commit_url"
        }, 
        {
            "location": "/config/#blob_in_commit_url", 
            "text": "In diffs, this optional field can help to create hyperlinks from the filenames presented\nin the meta-data to their full version. This setting is the formating string for such links,\nwhere:   %r  - name of the repository  %H  - full commit hash  %f  - filename in tree   For example:  blob_in_commit_url: https://github.com/kernelim/%r/blob/%H/%f", 
            "title": "blob_in_commit_url"
        }, 
        {
            "location": "/config/#from_email", 
            "text": "The fully formed email address to put in the  Form:  email field.  For example:  from_email: Gitomail  osiris@aloni.org", 
            "title": "from_email"
        }, 
        {
            "location": "/config/#filtered_email_destinations", 
            "text": "Default: empty  These are a list of email addresses (e.g.  a@b.c ) to which never to send emails, even\nif they appear as maintainers.", 
            "title": "filtered_email_destinations"
        }, 
        {
            "location": "/config/#source_highlight", 
            "text": "Default: True  A boolean which specifies whether to preform syntax highlighting.", 
            "title": "source_highlight"
        }, 
        {
            "location": "/config/#commit_subject_line", 
            "text": "Default (below):  commit_subject_line: [%r %b %h%n] %s  Format string for the per-commit subject line.", 
            "title": "commit_subject_line"
        }, 
        {
            "location": "/config/#summary_subject_line", 
            "text": "Default (below):  default_subject_line: [%r] %s  Format string for the summary email subject line.", 
            "title": "summary_subject_line"
        }, 
        {
            "location": "/config/#values-smtp-related", 
            "text": "", 
            "title": "Values (SMTP related)"
        }, 
        {
            "location": "/config/#smtp_hostname", 
            "text": "SMTP hostname for sending mails.", 
            "title": "smtp_hostname"
        }, 
        {
            "location": "/config/#smtp_port", 
            "text": "SMTP port for sending mails, defaults to 587.", 
            "title": "smtp_port"
        }, 
        {
            "location": "/config/#smtp_starttls", 
            "text": "Whether to enable TLS - defaults to True.", 
            "title": "smtp_starttls"
        }, 
        {
            "location": "/config/#smtp_username", 
            "text": "SMTP username for sending mails.", 
            "title": "smtp_username"
        }, 
        {
            "location": "/config/#smtp_password", 
            "text": "SMTP password for sending mails.  Example GMail configuration  A configuration for GMail or 'Google for Domains' can be based on the following template:  smtp_hostname: smtp.gmail.com\nsmtp_starttls: true\nsmtp_username: example-user@gmail.com\nsmtp_password: example-password\nfrom_email: Example User  example-user@gmail.com", 
            "title": "smtp_password"
        }, 
        {
            "location": "/config/#values-jira-integration", 
            "text": "The following fields allow to optionally activate support for JIRA integration.", 
            "title": "Values (JIRA integration)"
        }, 
        {
            "location": "/config/#issue_track_match", 
            "text": "This field describes a regex that matches strings that link to issues. The inner\nmost parenthesis is the part of the match that will receive the hyperlink.  For example:  issue_track_match: '[[]((PROJECT|OTHER|ISSUE)-[0-9]+)[]]'  With this matcher,  [PROJECT-123]  will match, and the substring  PROJECT-123 \nwill get hyperlinked. Plus, that substring is used for the  jira_cc  field,\nand  issue_track_url  fields, later on.", 
            "title": "issue_track_match"
        }, 
        {
            "location": "/config/#issue_track_url", 
            "text": "This field describes the hyperlink to generate for each issue mention in the\ncommit message.  For example:  issue_track_url: https://somefakeproject.com/browse/%s", 
            "title": "issue_track_url"
        }, 
        {
            "location": "/config/#jira_cc", 
            "text": "This field can specify a JIRA server and authentication credentials, from which\nGitomail would automatically fetch data concerning issues mentioned in commits. The\nmeta-data used from these issues can specify additional people to address when\nautomatically sending the emails.  For example:  jira_cc:\n  url: https://somecompany.atlassian.net/rest/api/2/issue/%s\n  http_creds: 'username:password'\n  fields:\n  - customfield_10300", 
            "title": "jira_cc"
        }, 
        {
            "location": "/maintainers-spec/", 
            "text": "Maintainers Specification\n\n\nGitomail supports its own \nMaintainers\n file format, which can optionally specify rules to match people to certain files or directories. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the files modified in the commit, effectively working very similarly to \nget_maintainers.pl\n.\n\n\nDirectory structure\n\n\nEach \nMaintainers\n file applies to the sub-directory in which it resides, and its own sub-directories. Directories need not have \nMaintainers\n files, so dispersal of these files across the tree and how they match pathnames are under the developer's full control.\n\n\n'alias' lines\n\n\nBy convention, developers assign people to alias names in the top level \nMaintainers\n file, similiarly to the following:\n\n\nalias dan      Dan Aloni \nalonid@gmail.com\n\n\n\n\n\nIt's also possible to use aliases for mailing lists:\n\n\nalias all      Everyone \ncode-review@some-project.org\n\n\n\n\n\nComment lines\n\n\nComment lines begin with the character '#'.\n\n\n'maintainer/reviewer/observer' lines\n\n\nLines the begin with either of \nmaintainer\n, \nreviewer\n, or \nobserver\n, match aliases\nto filenames, using globbing patterns.\n\n\nSyntax\n:\n\n\n[maintainer/reviewer/observer] [alias] (optional file globbing pattern)\n\n\n\n\nFile name globbing is provided so that the least amount of declarations will be needed in order to assign people to files. The globbing is similar to the \n.gitignore\n style of globbing.\n\n\nThe following rules apply:\n\n\n\n\nFor each file under consideration, \nMaintainers\n files are evaluated top to bottom (e.g. root directory \nMaintainers\n, then \nsub/Maintainers\n, and then \nsub/sub/Maintainers\n).\n\n\nEach globbing pattern is relative to the directory that contains the \nMaintainers\n file that specifies it.\n\n\nIf a globbing pattern is not specified, then 'match all files under here' is inferred.\n\n\nThere can be up to one \nmaintainer\n per file, however when matches overlap, the latter one will hold, and it serves as a valid use case. Maintainers are carried to the \nTo:\n field of the email.\n\n\nThere can be up to any amount of \nreviewer\ns. Reviewers are carried to the \nCc:\n field of the email.\n\n\nThere can be up to any amount of \nobserver\ns (which are considered passive reviewers). Observers are carried to the \nCc:\n field of the email. In effect, observers have no semantic difference from reviewers with regard to mails being sent.\n\n\n\n\nAn example\n\n\nLet's illustrate how rules in \nMaintainers\n files assign maintainer-ship to files under a source tree.\n\n\nSuppose we have a tree with three \nMaintainers\n files, spread across a root directory and two sub-directories:\n\n\n./Maintainers:\n\n\nmaintainer patrick\n# Patrick is the default maintainer of all the tree.\n\nmaintainer george **/*.csv\n\n\n\n\nHere, Patrick is the \ndefault\n maintainer of all the files in the tree, and George is the \ndefault\n maintainer of all CSV files on \nany\n sub-directory under the tree, overriding Patrick for those files only.\n\n\n./subdir/Maintainers:\n\n\nmaintainer rachel *.txt\n\n\n\n\nHere, Rachel is the maintainer of TXT files only under .\n/subdir\n All the \nother\n files (except for CSV files) in the directory are maintained by Patrick, because of the rule at the root dir \nMaintainers\n which still applies for them.\n\n\n./cat/Maintainers:\n\n\nmaintainer rachel hello.csv\nreviewer george hello.csv\n\n\n\n\nHere, Rachel overrides the maintainer-ship of \n./cat/hello.csv\n for herself but George will still get mails about it because he is now also a reviewer for it. All the \nother\n files (except for CSV files other than \nhello.csv\n) in the directory are maintained by Patrick, because of the rule at the root dir \nMaintainers\n which still applies for them.", 
            "title": "Specifying Maintainers"
        }, 
        {
            "location": "/maintainers-spec/#maintainers-specification", 
            "text": "Gitomail supports its own  Maintainers  file format, which can optionally specify rules to match people to certain files or directories. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the files modified in the commit, effectively working very similarly to  get_maintainers.pl .", 
            "title": "Maintainers Specification"
        }, 
        {
            "location": "/maintainers-spec/#directory-structure", 
            "text": "Each  Maintainers  file applies to the sub-directory in which it resides, and its own sub-directories. Directories need not have  Maintainers  files, so dispersal of these files across the tree and how they match pathnames are under the developer's full control.", 
            "title": "Directory structure"
        }, 
        {
            "location": "/maintainers-spec/#alias-lines", 
            "text": "By convention, developers assign people to alias names in the top level  Maintainers  file, similiarly to the following:  alias dan      Dan Aloni  alonid@gmail.com   It's also possible to use aliases for mailing lists:  alias all      Everyone  code-review@some-project.org", 
            "title": "'alias' lines"
        }, 
        {
            "location": "/maintainers-spec/#comment-lines", 
            "text": "Comment lines begin with the character '#'.", 
            "title": "Comment lines"
        }, 
        {
            "location": "/maintainers-spec/#maintainerreviewerobserver-lines", 
            "text": "Lines the begin with either of  maintainer ,  reviewer , or  observer , match aliases\nto filenames, using globbing patterns.  Syntax :  [maintainer/reviewer/observer] [alias] (optional file globbing pattern)  File name globbing is provided so that the least amount of declarations will be needed in order to assign people to files. The globbing is similar to the  .gitignore  style of globbing.  The following rules apply:   For each file under consideration,  Maintainers  files are evaluated top to bottom (e.g. root directory  Maintainers , then  sub/Maintainers , and then  sub/sub/Maintainers ).  Each globbing pattern is relative to the directory that contains the  Maintainers  file that specifies it.  If a globbing pattern is not specified, then 'match all files under here' is inferred.  There can be up to one  maintainer  per file, however when matches overlap, the latter one will hold, and it serves as a valid use case. Maintainers are carried to the  To:  field of the email.  There can be up to any amount of  reviewer s. Reviewers are carried to the  Cc:  field of the email.  There can be up to any amount of  observer s (which are considered passive reviewers). Observers are carried to the  Cc:  field of the email. In effect, observers have no semantic difference from reviewers with regard to mails being sent.", 
            "title": "'maintainer/reviewer/observer' lines"
        }, 
        {
            "location": "/maintainers-spec/#an-example", 
            "text": "Let's illustrate how rules in  Maintainers  files assign maintainer-ship to files under a source tree.  Suppose we have a tree with three  Maintainers  files, spread across a root directory and two sub-directories:", 
            "title": "An example"
        }, 
        {
            "location": "/maintainers-spec/#maintainers", 
            "text": "maintainer patrick\n# Patrick is the default maintainer of all the tree.\n\nmaintainer george **/*.csv  Here, Patrick is the  default  maintainer of all the files in the tree, and George is the  default  maintainer of all CSV files on  any  sub-directory under the tree, overriding Patrick for those files only.", 
            "title": "./Maintainers:"
        }, 
        {
            "location": "/maintainers-spec/#subdirmaintainers", 
            "text": "maintainer rachel *.txt  Here, Rachel is the maintainer of TXT files only under . /subdir  All the  other  files (except for CSV files) in the directory are maintained by Patrick, because of the rule at the root dir  Maintainers  which still applies for them.", 
            "title": "./subdir/Maintainers:"
        }, 
        {
            "location": "/maintainers-spec/#catmaintainers", 
            "text": "maintainer rachel hello.csv\nreviewer george hello.csv  Here, Rachel overrides the maintainer-ship of  ./cat/hello.csv  for herself but George will still get mails about it because he is now also a reviewer for it. All the  other  files (except for CSV files other than  hello.csv ) in the directory are maintained by Patrick, because of the rule at the root dir  Maintainers  which still applies for them.", 
            "title": "./cat/Maintainers:"
        }, 
        {
            "location": "/similar-commits/", 
            "text": "Similar Commits Detection\n\n\nMany teams working with with Git often \nrebase their history\n between reviews, and before pushing their work to to shared branches. In teams where there is not a single person in charge of 'pulling' and doing integration, this helps keep the shared history linear, with little to no changes hidden inside merge commits, and overall history tidyness is improved.\n\n\nHowever, when commits are being rebased and possibly modified, it's hard to do a 'second order diff' to see what changed in the commit diff itself.\n\n\nTo solve this one of the features of Gitomail is the detection of commits that look similar to previous posted ones. It does so by calculating a hash over each of the commit diffs, after stripping line numbers. When a branch is rebased, only the commits that appear new are marked as bold. In addition, the mails sent for the identical commits are marked with the \nInexactDiffDup\n flag.\n\n\nExample\n\n\nSuppose a new branch was pushed. The summary mail will appear as such:\n\n\n\n\nBut later it was re-pushed, with a single commit being modified. Only that commit will be marked as bold:\n\n\n\n\nGitomail does not resend emails if the commit hash did not change, as can be seen above for commits #1 and #2. For commit #3 and #4, the emails are resent, but for #4 is flagged with \nInexactDiffDup\n.", 
            "title": "Similar Commits Detection"
        }, 
        {
            "location": "/similar-commits/#similar-commits-detection", 
            "text": "Many teams working with with Git often  rebase their history  between reviews, and before pushing their work to to shared branches. In teams where there is not a single person in charge of 'pulling' and doing integration, this helps keep the shared history linear, with little to no changes hidden inside merge commits, and overall history tidyness is improved.  However, when commits are being rebased and possibly modified, it's hard to do a 'second order diff' to see what changed in the commit diff itself.  To solve this one of the features of Gitomail is the detection of commits that look similar to previous posted ones. It does so by calculating a hash over each of the commit diffs, after stripping line numbers. When a branch is rebased, only the commits that appear new are marked as bold. In addition, the mails sent for the identical commits are marked with the  InexactDiffDup  flag.", 
            "title": "Similar Commits Detection"
        }, 
        {
            "location": "/similar-commits/#example", 
            "text": "Suppose a new branch was pushed. The summary mail will appear as such:   But later it was re-pushed, with a single commit being modified. Only that commit will be marked as bold:   Gitomail does not resend emails if the commit hash did not change, as can be seen above for commits #1 and #2. For commit #3 and #4, the emails are resent, but for #4 is flagged with  InexactDiffDup .", 
            "title": "Example"
        }, 
        {
            "location": "/gmail/", 
            "text": "TBD", 
            "title": "Recommended GMail filters"
        }
    ]
}