{
    "docs": [
        {
            "location": "/", 
            "text": "Gitomail\n\n\nGitomail is a tool for generating pretty inline-HTML emails for \nGit\n commits, with a sending capability to proper recipients.\n\n\nThis page provides a short introduction to Gitomail's main features.\n\n\nFirst, some history\n\n\nMany years before \nGit\n became popular or existed, people were using mailing lists in order to collaborate on code changes. The unified diff format, now popularized, as used as a diff format in the Plain Text-formatted emails. A text-based console email program such as \nmutt\n presented the user a convinent way to handle these diffs and import them into their source trees.\n\n\nBelow is a fake example of such an email, based on a commit in the PostgreSQL project:\n\n\n\n\n(shown here above, a screenshot from an old email reader)\n\n\nWith the advant of sites like \nGithub\n, email became under-used for reviewing changes, and in the Webmail era, emails containing diffs may appear somewhat arcane to developers of today.\n\n\nDiffs in the age of Webmail\n\n\nNowadays, the Plain Text version of the email message seems outdated. This is where Gitomail comes into the picture.\n\n\nFor example, the email from above, when sent by Gitomail, can appear like the following:\n\n\n\n\nCombined with full syntax highlighting, the HTML part of the email makes this appearance possible.\n\n\nInline reply friendliness\n\n\nSimilarly to Plain Text emails, it's possible to reply to changes inline:\n\n\n\n\nBranch change summaries\n\n\nGitomail tracks changes to branches, and can describe what changed, dealing properly with fast-forward and rebases. It's possible to specify how branches relate to each so that summaries make sense.\n\n\nFast forward example\n\n\n\n\nRebase example\n\n\n\n\nAutomatic recipients and code maintainership\n\n\nOf course, it is not enough to formatt the emails. We would also like to designate their recipients, preferrably in an automated way.\n\n\nInspired by a very wonderful script in the Linux kernel source tree named \nget_maintainers.pl\n, Gitomail supports its own \nMaintainers\n file format, which can specify rules to match people to certain files or directories.\n\n\nmaintainer dan file.*\nmaintainer jack Makefile\nreviewer mailinglist\n\n\n\n\nUsing a very minimal specification language, and formatted similarly to \n.gitignore\n, these \nMaintainers\n files can optionally spread across the source tree, assigning code to maintainers. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the code changed in the commit, effectively working very similar to \nget_maintainers.pl\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#gitomail", 
            "text": "Gitomail is a tool for generating pretty inline-HTML emails for  Git  commits, with a sending capability to proper recipients.  This page provides a short introduction to Gitomail's main features.", 
            "title": "Gitomail"
        }, 
        {
            "location": "/#first-some-history", 
            "text": "Many years before  Git  became popular or existed, people were using mailing lists in order to collaborate on code changes. The unified diff format, now popularized, as used as a diff format in the Plain Text-formatted emails. A text-based console email program such as  mutt  presented the user a convinent way to handle these diffs and import them into their source trees.  Below is a fake example of such an email, based on a commit in the PostgreSQL project:   (shown here above, a screenshot from an old email reader)  With the advant of sites like  Github , email became under-used for reviewing changes, and in the Webmail era, emails containing diffs may appear somewhat arcane to developers of today.", 
            "title": "First, some history"
        }, 
        {
            "location": "/#diffs-in-the-age-of-webmail", 
            "text": "Nowadays, the Plain Text version of the email message seems outdated. This is where Gitomail comes into the picture.  For example, the email from above, when sent by Gitomail, can appear like the following:   Combined with full syntax highlighting, the HTML part of the email makes this appearance possible.", 
            "title": "Diffs in the age of Webmail"
        }, 
        {
            "location": "/#inline-reply-friendliness", 
            "text": "Similarly to Plain Text emails, it's possible to reply to changes inline:", 
            "title": "Inline reply friendliness"
        }, 
        {
            "location": "/#branch-change-summaries", 
            "text": "Gitomail tracks changes to branches, and can describe what changed, dealing properly with fast-forward and rebases. It's possible to specify how branches relate to each so that summaries make sense.", 
            "title": "Branch change summaries"
        }, 
        {
            "location": "/#fast-forward-example", 
            "text": "", 
            "title": "Fast forward example"
        }, 
        {
            "location": "/#rebase-example", 
            "text": "", 
            "title": "Rebase example"
        }, 
        {
            "location": "/#automatic-recipients-and-code-maintainership", 
            "text": "Of course, it is not enough to formatt the emails. We would also like to designate their recipients, preferrably in an automated way.  Inspired by a very wonderful script in the Linux kernel source tree named  get_maintainers.pl , Gitomail supports its own  Maintainers  file format, which can specify rules to match people to certain files or directories.  maintainer dan file.*\nmaintainer jack Makefile\nreviewer mailinglist  Using a very minimal specification language, and formatted similarly to  .gitignore , these  Maintainers  files can optionally spread across the source tree, assigning code to maintainers. It's especially useful for single repositories bearing multiple maintainers of code. These files are then used to automatically set the destination address of emails to the rightful maintainers, based on the code changed in the commit, effectively working very similar to  get_maintainers.pl .", 
            "title": "Automatic recipients and code maintainership"
        }, 
        {
            "location": "/ChangeLog/", 
            "text": "TBD", 
            "title": "Changelog"
        }, 
        {
            "location": "/install/", 
            "text": "Install from precompiled binaries\n\n\nBinary RPMs for some Linux environments are provided:\n\n\n\n\nFedora\n : Available at \nCopr\n\n\nCentOS\n : Available at \nCopr\n\n\n\n\nOr, build and install from source\n\n\nAlternatively, it's possible to build Gitomail from source.\n\n\n\n\ninstall the \nStack tool\n.\n\n\nUsing \nstack\n, perform build and install:\n\n\n\n\ngit clone \nhttps://github.com/kernelim/gitomail\n\ncd gitomail\nstack install\n\n\n\n\nThe binary should be available as \n~/.local/bin/gitomail\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#install-from-precompiled-binaries", 
            "text": "Binary RPMs for some Linux environments are provided:   Fedora  : Available at  Copr  CentOS  : Available at  Copr", 
            "title": "Install from precompiled binaries"
        }, 
        {
            "location": "/install/#or-build-and-install-from-source", 
            "text": "Alternatively, it's possible to build Gitomail from source.   install the  Stack tool .  Using  stack , perform build and install:   git clone  https://github.com/kernelim/gitomail \ncd gitomail\nstack install  The binary should be available as  ~/.local/bin/gitomail .", 
            "title": "Or, build and install from source"
        }, 
        {
            "location": "/config/", 
            "text": "TBD", 
            "title": "Configuration"
        }, 
        {
            "location": "/execution/", 
            "text": "TBD", 
            "title": "Execution"
        }, 
        {
            "location": "/gmail/", 
            "text": "TBD", 
            "title": "Recommended GMail filters"
        }
    ]
}